name: Python config generator dev

on:
  push:
    branches:
      # - 'main'
      - 'dev'

  # workflow needs to be started manually from main branch
  workflow_dispatch:
    inputs:
      site_id:
        description: 'Site name:'
        required: true
        type: string
        default: 'None'

env:
  AZ_FUNC_ARTIFACT: 'fa-py-code-artifact'
  AZ_FUNC_APP: 'func-app-v2-dev' # set this to your function app name
  AZ_FUNC_APP_PROJECT_PATH: 'source'
  AZ_RG: 'RG-TF-DEV-FUNC'
  # SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
  # EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
  # EMAIL_SENDER_PASSWORD: ${{ secrets.EMAIL_SENDER_PASSWORD }}
  # EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
  # MANAGER_URL: ${{ secrets.MANAGER_URL }}
  # MANAGER_LOGIN: ${{ secrets.MANAGER_LOGIN }}
  # MANAGER_PASS: ${{ secrets.MANAGER_PASS }}
  # KEY_VAULT_URL: ${{ secrets.KEY_VAULT_URL }}
  # MI_CLIENT_ID: ${{ secrets.MI_CLIENT_ID }}

jobs:
  python_code:
    name: Generate SDWAN initial config
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5

      - name: 'Python: Install'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: 'x64'

      # - name: 'Create and start virtual env'
      #   run: |
      #     python -m venv venv
      #     source venv/bin/activate

      # # this Action should follow steps to set up Python build environment
      # - name: Install Python dependencies
      #   uses: py-actions/py-dependency-install@v4
      #   with:
      #     path: "source/requirements.txt"
      #     update-pip: "true"
      #     update-setuptools: "false"
      #     update-wheel: "false"

      - name: 'Python: Install dependencies'
        run: |
          # cd source
          python --version
          pwd
          ls -l
          # python -m pip install --upgrade pip
          # python -m pip install -r requirements.txt
          python -m pip install --target='source/.python_packages/lib/site-packages' -r source/requirements.txt
          pwd
          ls -l

      - name: 'Python: SD-WAN config generator'
        if: ${{ github.event.inputs.site_id != 'None' && github.event.inputs.site_id != '' }}
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_SENDER_PASSWORD: ${{ secrets.EMAIL_SENDER_PASSWORD }}
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
          MANAGER_URL: ${{ secrets.MANAGER_URL }}
          MANAGER_LOGIN: ${{ secrets.MANAGER_LOGIN }}
          MANAGER_PASS: ${{ secrets.MANAGER_PASS }}
        run: |
          python source/app_cfg_gen.py ${{ github.event.inputs.site_id }}

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.AZ_FUNC_ARTIFACT }}
          path: ${{ env.AZ_FUNC_APP_PROJECT_PATH }}


  function_deploy:
    name: Azure Function App Deploy
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    needs: python_code
    environment: development
    permissions:
      id-token: write # Required for OIDC
      contents: read # Required for actions/checkout
    steps:
      - name: 'Download artifact'
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.AZ_FUNC_ARTIFACT }}

      - name: Display structure of downloaded files
        run: ls -R

      - name: 'Azure CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUB_ID }}

      # Key Vault access is done via Managed Identity
      - name: 'Azure Function App config'
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az functionapp config appsettings set -g ${{ env.AZ_RG }} -n ${{ env.AZ_FUNC_APP }} --settings \
              SMTP_SERVER="${{ secrets.SMTP_SERVER }}" \
              EMAIL_SENDER="${{ secrets.EMAIL_SENDER }}" \
              EMAIL_SENDER_PASSWORD="${{ secrets.EMAIL_SENDER_PASSWORD }}" \
              EMAIL_RECEIVER="${{ secrets.EMAIL_RECEIVER }}" \
              MANAGER_URL="${{ secrets.MANAGER_URL }}" \
              MANAGER_LOGIN="${{ secrets.MANAGER_LOGIN }}" \
              MANAGER_PASS="${{ secrets.MANAGER_PASS }}" \
              KEY_VAULT_URL="${{ secrets.KEY_VAULT_URL }}" \
              MI_CLIENT_ID="${{ secrets.MI_CLIENT_ID }}"

      - name: 'Azure Function App deployment'
        uses: azure/functions-action@v1
        id: deploy-to-function-app
        with:
          app-name: ${{ env.AZ_FUNC_APP }}


